name: Build, Test, and Deploy Docker Image

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
    tags:
      - '*'  # Trigger on push to tags
  pull_request:
    branches:
      - main  # Trigger on pull request to main

jobs:
  # Build Job
  build:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12-dind  # Docker-in-Docker service
        options: --privileged
    env:
      IMAGE_FILE: "easynote-om.tar"
      REGISTRY_PATH: "ghcr.io/tambinos/easynotes-ndg"
      IMAGE_NAME: "easy-notes"
      IMAGE_VERSION: "latest"
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx for advanced Docker builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry (GHCR)
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      # Build the Docker image
      - name: Build the Docker image
        run: |
          docker build -t $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_VERSION -t $REGISTRY_PATH/$IMAGE_NAME:latest .
          docker save -o $IMAGE_FILE $REGISTRY_PATH/$IMAGE_NAME:latest

      # Upload the image tarball as an artifact for the next job
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: easy-notes-tarball
          path: $IMAGE_FILE

  # Test Job
  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      docker:
        image: docker:19.03.12-dind  # Docker-in-Docker service
        options: --privileged
    env:
      MYSQL_DATABASE: 'easynotes'
      MYSQL_USER: 'easynotes'
      MYSQL_PASSWORD: 'easynotes'
      IMAGE_FILE: "easynote-om.tar"
      IMAGE_NAME: "easy-notes"
      VERSION_TAG: "latest"
      REGISTRY_PATH: "ghcr.io/tambinos/easynotes-ndg"
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Download the saved Docker image artifact from the build job
      - name: Download Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: easy-notes-tarball

      # Load the Docker image
      - name: Load Docker image
        run: |
          docker load -i $IMAGE_FILE

      # Create Docker network
      - name: Create Docker network
        run: docker network create net-easynotes

      # Start MySQL container
      - name: Start MySQL container
        run: |
          docker pull mysql:latest
          docker run --rm --name easynotes-db --network net-easynotes \
            -e MYSQL_RANDOM_ROOT_PASSWORD=yes \
            -e MYSQL_DATABASE=$MYSQL_DATABASE \
            -e MYSQL_USER=$MYSQL_USER \
            -e MYSQL_PASSWORD=$MYSQL_PASSWORD \
            -v $(pwd)/dbseed.sql:/docker-entrypoint-initdb.d/seed.sql -d mysql:latest

      # Wait for MySQL to initialize
      - name: Wait for MySQL to initialize
        run: sleep 30

      # Start EasyNotes container
      - name: Start EasyNotes container
        run: |
          docker run -d --rm --network net-easynotes --name easynotes \
            -e "DB_PORT=3306" -e "DB_HOST=easynotes-db" -e "DB_NAME=easynotes" \
            -e "DB_USERNAME=easynotes" -e "DB_PASSWORD=easynotes" -p 8080:8080 \
            $REGISTRY_PATH/$IMAGE_NAME:$VERSION_TAG

      # Test the application with curl
      - name: Test EasyNotes with curl
        run: |
          docker run --rm -d --name easynotes-test --network net-easynotes alpine:latest /bin/sh -c "sleep infinity"
          docker exec easynotes-test /bin/sh -c "apk add --no-cache curl"
          docker exec easynotes-test curl http://easynotes:8080 -f || exit 1

      # Clean up
      - name: Clean up containers and network
        run: |
          docker stop easynotes-db easynotes easynotes-test
          docker network rm net-easynotes

  # Deploy Job
  deploy:
    runs-on: ubuntu-latest
    needs: test
    env:
      IMAGE_FILE: "easynote-om.tar"
      REGISTRY_PATH: "ghcr.io/tambinos/easynotes-ndg"
      IMAGE_NAME: "easy-notes"
      VERSION_TAG: "latest"
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Log in to GitHub Container Registry (GHCR)
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      # Download the Docker image artifact from the build job
      - name: Download Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: easy-notes-tarball

      # Load the Docker image
      - name: Load Docker image
        run: |
          docker load -i $IMAGE_FILE

      # Push Docker image to GitHub Container Registry with version tag
      - name: Push Docker image with version tag
        run: |
          docker push $REGISTRY_PATH/$IMAGE_NAME:$VERSION_TAG

      # Push Docker image with latest tag
      - name: Push Docker image with latest tag
        run: |
          docker push $REGISTRY_PATH/$IMAGE_NAME:latest

      # Log out from GitHub Container Registry
      - name: Logout from GHCR
        run: docker logout ghcr.io

