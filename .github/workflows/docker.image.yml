name: Build, Test, and Deploy Docker Image

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
    tags:
      - '*'
  pull_request:
    branches:
      - main  # Trigger on pull request to main

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12-dind  # Docker-in-Docker service
        options: --privileged
    env:
      MYSQL_DATABASE: 'easynotes'
      MYSQL_USER: 'dbuser'
      MYSQL_PASSWORD: 'password2023'
      IMAGE_NAME: 'easy-notes'
      VERSION_TAG: 'latest'
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx for advanced Docker builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry (GHCR)
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      # Convert the repository name to lowercase
      - name: Convert repository name to lowercase
        id: convert_repo
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Build the Docker image
      - name: Build the Docker image
        run: |
          docker build -t ghcr.io/${{ env.REPO_NAME }}/$IMAGE_NAME:$VERSION_TAG .
          docker save -o $IMAGE_NAME.tar ghcr.io/${{ env.REPO_NAME }}/$IMAGE_NAME:$VERSION_TAG

      # Save the Docker image tarball as an artifact
      - name: Save Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: easy-notes-tarball  # Fixed the artifact name to avoid variable issues
          path: $IMAGE_NAME.tar

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      docker:
        image: docker:19.03.12-dind
        options: --privileged
    env:
      MYSQL_DATABASE: 'easynotes'
      MYSQL_USER: 'dbuser'
      MYSQL_PASSWORD: 'password2023'
      IMAGE_NAME: 'easy-notes'
      VERSION_TAG: '1.0.0'
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Load the saved Docker image artifact
      - name: Load Docker image
        uses: actions/download-artifact@v2
        with:
          name: easy-notes-tarball  # Use the same fixed name as in the build step

      - name: Load Docker image from tarball
        run: |
          docker load -i $IMAGE_NAME.tar

      # Create a Docker network for communication between containers
      - name: Create Docker network
        run: docker network create net-easynotes

      # Start MySQL container
      - name: Start MySQL container
        run: |
          docker run -d --name mysql-container --network net-easynotes \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=$MYSQL_DATABASE \
            -e MYSQL_USER=$MYSQL_USER \
            -e MYSQL_PASSWORD=$MYSQL_PASSWORD \
            mysql:latest

      # Wait for MySQL to initialize
      - name: Wait for MySQL to initialize
        run: sleep 30  # Adjust this value if MySQL takes more time to initialize

      # Start EasyNotes container and connect it to the database
      - name: Start EasyNotes container
        run: |
          docker run -d --name easy-notes-container --network net-easynotes \
            -e MYSQL_DATABASE=$MYSQL_DATABASE \
            -e MYSQL_USER=$MYSQL_USER \
            -e MYSQL_PASSWORD=$MYSQL_PASSWORD \
            ghcr.io/${{ env.REPO_NAME }}/$IMAGE_NAME:$VERSION_TAG

      # Create an Alpine container with curl to test the service
      - name: Test EasyNotes with curl
        run: |
          docker run -d --name easynotes-test --network net-easynotes alpine:latest /bin/sh -c "sleep infinity"
          docker exec easynotes-test /bin/sh -c "apk add --no-cache curl"
          docker exec easynotes-test curl http://easy-notes-container:8080 -f || exit 1

      # Clean up containers and network
      - name: Clean up containers and network
        run: |
          docker stop easy-notes-container mysql-container easynotes-test
          docker rm easy-notes-container mysql-container easynotes-test
          docker network rm net-easynotes

  deploy:
    runs-on: ubuntu-latest
    needs: test
    env:
      IMAGE_NAME: 'easy-notes'
      VERSION_TAG: '1.0.0'
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Log in to GitHub Container Registry (GHCR)
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      # Load the Docker image artifact from the build job
      - name: Load Docker image from build artifact
        uses: actions/download-artifact@v2
        with:
          name: easy-notes-tarball  # Use the same fixed name as in the build step

      - name: Load Docker image
        run: |
          docker load -i $IMAGE_NAME.tar

      # Push the Docker image with the version tag
      - name: Push Docker image with version tag
        run: |
          docker push ghcr.io/${{ env.REPO_NAME }}/$IMAGE_NAME:$VERSION_TAG

      # Push the Docker image with the latest tag
      - name: Push Docker image with latest tag
        run: |
          docker push ghcr.io/${{ env.REPO_NAME }}/$IMAGE_NAME:latest

      # Log out from GitHub Container Registry
      - name: Logout from GHCR
        run: docker logout ghcr.io

